
[force_move]
enable_force_move : True

[gcode_macro M84]
rename_existing:M84.1
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	SET_KINEMATIC_POSITION
	
[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
    SET_KINEMATIC_POSITION X=150
    SET_KINEMATIC_POSITION Y=150
	SET_KINEMATIC_POSITION Z=150
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0



##归零流程修改
[homing_override]
set_position_X:0   
set_position_y:0
set_position_z:0
axes:xy
gcode: 
    {% set HOME_CUR = 1 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}

	{% if params.X is defined %}
	    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8} 
        G28 X
		SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}     
        BEEP I=1 DUR=100       
        G1 X10 F1200
    {% endif %}

    {% if params.Y is defined %}
		SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9} 
		G28 Y
		SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}   
        BEEP I=1 DUR=100          
       G1 Y10 F1200
    {% endif %}

    {% if params.Z is defined %}
#        G90
#        G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
#        G91

        G28 Z
        G1 Z20 F480      
        BEEP I=1 DUR=100	  
    {% endif %}

    {% if params.X is undefined %}
    {% if params.Y is undefined %}
    {% if params.Z is undefined %}
    

    G91
#    G1 Z5 F600	
    G1 X10 F2400
    G1 Y10 F2400
    G4 P2000
    
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8} 
    G28 X
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} 
    BEEP I=1 DUR=100  
    G0 X10 F1200
    
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9} 
	G28 Y
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR} 
    BEEP I=1 DUR=100        
    
    G90
    G0 X{printer.toolhead.axis_maximum.x/2 - printer.configfile.settings.probe.x_offset}  Y{printer.toolhead.axis_maximum.y/2 - printer.configfile.settings.probe.y_offset} F7800
    G91

    G28 Z
    BEEP I=1 DUR=100  
    G0 Z50  F480
    {% endif %}
    {% endif %}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} 
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} 
    M204 S10000

    G90
#    G1 X0 Y0 F7800

[filament_switch_sensor fila]
pause_on_runout: False
runout_gcode:
            PAUSE
            SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0
event_delay: 3.0
pause_delay: 0.5
switch_pin: !PC1

[output_pin pwc]
pin: PA3
pwm: False
value: 1
shutdown_value: 1


#[gcode_macro PRINT_START]
#gcode:
    #HOT_CALIBRATE_START

#[gcode_macro PRINT_START_QD]
#gcode:
    #HOT_CALIBRATE_START

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
        G1 Z200 F600                                         
    {% endif %}

    G1  X5 Y5 F1000

    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PRINT_END]
gcode:
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0  #关闭活性炭风扇
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0

    M84
#    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
#	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
#	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
#	SET_STEPPER_ENABLE STEPPER=extruder enable=0

    BED_MESH_CLEAR      #恢复调平数据
    BED_MESH_PROFILE LOAD=default
    G31
    BEEP I=2 DUR=500



    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(50)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
#       SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F600                                                                     ; raise Z up by z hop amount
        {% else %}
#            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours

        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}


[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% if printer["output_pin sound"].value|int == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=beeper VALUE=1
            G4 P{dur}
            SET_PIN PIN=beeper VALUE=0
    		G4 P{dur}
        {% endfor %}
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1  E{e} F900                                                ; prime nozzle by E, lower Z back down
#        {% else %}                      
#            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}  
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}



[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
    RESHAPER_CALIBRATE FREQ_START=30 FREQ_END=150


[gcode_macro HOT_CALIBRATE_START]
variable_k: 0
gcode:
    {% if k == 0 %}
        {% if printer['heater_generic hot'].temperature > 49 %}
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=1
            SET_GCODE_OFFSET Z_ADJUST=-0.10 MOVE=0
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=1
        {% endif %}
    {% endif %}

[gcode_macro HOT_CALIBRATE_END]
variable_hot_set: 0
gcode:
    {% if  hot_set == 1 %}
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=0
        SET_GCODE_OFFSET Z_ADJUST=+0.10 MOVE=0
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=0
    {% endif %}

##LED 灯
[output_pin caselight]
##  Chamber Lighting - In 5V-RGB Position
pin: PC7
pwm: false
shutdown_value:0
value:1
#cycle_time:0.01

[output_pin beeper]
##  Chamber Lighting - In 5V-RGB Position
pin: PA2
pwm: false
shutdown_value:0
value:0



#[gcode_macro _CG28]
#gcode:
#    {% if "xyz" not in printer.toolhead.homed_axes %}
#        G28
#    {% endif %}




[gcode_macro G30]
gcode:
    BED_MESH_CLEAR      #清除调平数据
#    G28 
    BED_MESH_CALIBRATE mesh_min=10,10  mesh_max=310,310  METHOD=manual #手动动调平



[gcode_macro M141]
gcode:
      SET_HEATER_TEMPERATURE HEATER=hot TARGET={params.S}

    
[gcode_macro M106]
gcode:
    {% if params.P is defined %}
      {% if params.S is defined %}
        SET_PIN PIN=fan{params.P|int} VALUE={params.S|int}
      {% else %}
        SET_PIN PIN=fan{params.P|int} VALUE=255
      {% endif %}
    {% endif %} 

    {% if params.T is defined %}
        {% if (params.T|int)==-2 %}
          {% if params.S is defined %}       
            SET_PIN PIN=fan3 VALUE={params.S|int}
          {% else %}
            SET_PIN PIN=fan3 VALUE=255
          {% endif %}
        {% endif %}
    {% endif %}

    {% if params.P is undefined %}
    {% if params.T is undefined %}
    {% if params.S is defined %}
            SET_PIN PIN=fan0 VALUE={params.S|int}
       {% else %}
            SET_PIN PIN=fan0 VALUE=255       
    {% endif %}
    {% endif %}
    {% endif %}



[gcode_macro M107]
gcode:  
    SET_PIN PIN=fan0 VALUE=0 
#    SET_PIN PIN=fan1 VALUE=0
#    SET_PIN PIN=fan2 VALUE=0 

[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}


[gcode_macro M8029]
gcode:
     {% if params.D is defined %}
       {% if (params.D|int)==1 %} 
        SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=1
       {% endif %}
       {% if (params.D|int)==0 %} 
        SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=0
       {% endif %}
     {% endif %}

     
[gcode_macro M900]
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 


[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M901]
gcode:
#    M104 S140
    G28
    SHAPER_CALIBRATE
    SAVE_CONFIG



       
[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE


    
[output_pin sound]
pin: PA13
value:1


[gcode_macro beep_on]
gcode:
    SET_PIN PIN=sound VALUE=1
    
[gcode_macro beep_off]
gcode:
    SET_PIN PIN=sound VALUE=0


[gcode_arcs]
resolution: 1.0

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
    

[gcode_macro M4029]
gcode:
    BED_MESH_CLEAR
    G91 
    G1 Z10 F600
    G90
    G28
    1 X{printer.toolhead.axis_maximum.x/2 - printer.configfile.settings.probe.x_offset}  Y{printer.toolhead.axis_maximum.y/2 - printer.configfile.settings.probe.y_offset} F7800
    G1 Z15 F600
    ABORT
    PROBE_CALIBRATE
    ABORT
    G0 Z0



[gcode_macro M603]
description: filament unload
gcode:
    G92 E0
    G0  E15 F400
    G4  P1000
    G92 E0
    G1  E-80 F800


#####################################新增KAMP调平
[exclude_object]

[gcode_macro G31]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1

[gcode_macro G32]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=0


[gcode_macro G29]
variable_k:1
gcode:

    {% if k|int==1 %}
        BED_MESH_CLEAR      #清除调平数据
#    G28   
        BED_MESH_CALIBRATE PROFILE=kamp  #自动调平
    {% endif %}


[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}

